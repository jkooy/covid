{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting keras\n",
      "  Using cached https://files.pythonhosted.org/packages/ad/fd/6bfe87920d7f4fd475acd28500a42482b6b84479832bdc0fe9e589a60ceb/Keras-2.3.1-py2.py3-none-any.whl\n",
      "Requirement already satisfied: scipy>=0.14 in /opt/conda/lib/python3.7/site-packages (from keras) (1.3.1)\n",
      "Requirement already satisfied: numpy>=1.9.1 in /opt/conda/lib/python3.7/site-packages (from keras) (1.16.4)\n",
      "Requirement already satisfied: keras-applications>=1.0.6 in /opt/conda/lib/python3.7/site-packages (from keras) (1.0.8)\n",
      "Requirement already satisfied: h5py in /opt/conda/lib/python3.7/site-packages (from keras) (2.9.0)\n",
      "Requirement already satisfied: pyyaml in /opt/conda/lib/python3.7/site-packages (from keras) (5.1.2)\n",
      "Requirement already satisfied: six>=1.9.0 in /opt/conda/lib/python3.7/site-packages (from keras) (1.12.0)\n",
      "Requirement already satisfied: keras-preprocessing>=1.0.5 in /opt/conda/lib/python3.7/site-packages (from keras) (1.1.0)\n",
      "Installing collected packages: keras\n",
      "Successfully installed keras-2.3.1\n"
     ]
    }
   ],
   "source": [
    "!pip install keras --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.layers import Input, Lambda, Dense, Flatten\n",
    "from keras.models import Model\n",
    "from keras.applications.vgg16 import VGG16\n",
    "from keras.applications.vgg16 import preprocess_input\n",
    "from keras.preprocessing import image\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "from keras.models import Sequential\n",
    "import numpy as np\n",
    "from glob import glob\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torchxrayvision as xrv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "IMAGE_SIZE = [224, 224]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data_path = '../images'\n",
    "test_data_path = 'images'\n",
    "val_data_path = 'images'\n",
    "\n",
    "vgg = VGG16(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "for layer in vgg.layers:\n",
    "    layer.trainable = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "folders = glob('images/*')\n",
    "folders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tensor(\"flatten_12/Reshape:0\", shape=(?, ?), dtype=float32)\n"
     ]
    }
   ],
   "source": [
    "x = Flatten()(vgg.output)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Dropout, Flatten\n",
    "from keras.layers import Conv2D, MaxPooling2D\n",
    "model = Sequential()\n",
    "model.add(Conv2D(32, kernel_size=(3, 3),\n",
    "                 activation='relu',\n",
    "                 input_shape=IMAGE_SIZE + [3]))\n",
    "# model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "\n",
    "# model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "model.add(Flatten())\n",
    "# model.add(Dense(128, activation='relu'))\n",
    "# model.add(Dropout(0.5))\n",
    "model.add(Dense(3, activation='softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_9\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d_12 (Conv2D)           (None, 222, 222, 32)      896       \n",
      "_________________________________________________________________\n",
      "dropout_12 (Dropout)         (None, 222, 222, 32)      0         \n",
      "_________________________________________________________________\n",
      "flatten_11 (Flatten)         (None, 1577088)           0         \n",
      "_________________________________________________________________\n",
      "dense_15 (Dense)             (None, 3)                 4731267   \n",
      "=================================================================\n",
      "Total params: 4,732,163\n",
      "Trainable params: 4,732,163\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "prediction = Dense(len(folders), activation='softmax')(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_4\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input_4 (InputLayer)         (None, 224, 224, 3)       0         \n",
      "_________________________________________________________________\n",
      "block1_conv1 (Conv2D)        (None, 224, 224, 64)      1792      \n",
      "_________________________________________________________________\n",
      "block1_conv2 (Conv2D)        (None, 224, 224, 64)      36928     \n",
      "_________________________________________________________________\n",
      "block1_pool (MaxPooling2D)   (None, 112, 112, 64)      0         \n",
      "_________________________________________________________________\n",
      "block2_conv1 (Conv2D)        (None, 112, 112, 128)     73856     \n",
      "_________________________________________________________________\n",
      "block2_conv2 (Conv2D)        (None, 112, 112, 128)     147584    \n",
      "_________________________________________________________________\n",
      "block2_pool (MaxPooling2D)   (None, 56, 56, 128)       0         \n",
      "_________________________________________________________________\n",
      "block3_conv1 (Conv2D)        (None, 56, 56, 256)       295168    \n",
      "_________________________________________________________________\n",
      "block3_conv2 (Conv2D)        (None, 56, 56, 256)       590080    \n",
      "_________________________________________________________________\n",
      "block3_conv3 (Conv2D)        (None, 56, 56, 256)       590080    \n",
      "_________________________________________________________________\n",
      "block3_pool (MaxPooling2D)   (None, 28, 28, 256)       0         \n",
      "_________________________________________________________________\n",
      "block4_conv1 (Conv2D)        (None, 28, 28, 512)       1180160   \n",
      "_________________________________________________________________\n",
      "block4_conv2 (Conv2D)        (None, 28, 28, 512)       2359808   \n",
      "_________________________________________________________________\n",
      "block4_conv3 (Conv2D)        (None, 28, 28, 512)       2359808   \n",
      "_________________________________________________________________\n",
      "block4_pool (MaxPooling2D)   (None, 14, 14, 512)       0         \n",
      "_________________________________________________________________\n",
      "block5_conv1 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
      "_________________________________________________________________\n",
      "block5_conv2 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
      "_________________________________________________________________\n",
      "block5_conv3 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
      "_________________________________________________________________\n",
      "block5_pool (MaxPooling2D)   (None, 7, 7, 512)         0         \n",
      "_________________________________________________________________\n",
      "flatten_12 (Flatten)         (None, 25088)             0         \n",
      "_________________________________________________________________\n",
      "dense_16 (Dense)             (None, 3)                 75267     \n",
      "=================================================================\n",
      "Total params: 14,789,955\n",
      "Trainable params: 75,267\n",
      "Non-trainable params: 14,714,688\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "model = Model(inputs=vgg.input, outputs=prediction)\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(\n",
    "    loss='categorical_crossentropy',\n",
    "    optimizer='adam',\n",
    "    metrics=['accuracy']\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 42 images belonging to 3 classes.\n",
      "Found 10 images belonging to 3 classes.\n"
     ]
    }
   ],
   "source": [
    "train_dataGen = ImageDataGenerator(rescale=1./255,\n",
    "                                  shear_range=0.2,\n",
    "                                  zoom_range=0.2,\n",
    "                                  horizontal_flip=True)\n",
    "\n",
    "test_dataGen = ImageDataGenerator(rescale=1./255)\n",
    "\n",
    "training_set = train_dataGen.flow_from_directory('images',\n",
    "                                                target_size=(224, 224),\n",
    "                                                batch_size=32,\n",
    "                                                class_mode='categorical')\n",
    "test_set = test_dataGen.flow_from_directory('test',\n",
    "                                                target_size=(224, 224),\n",
    "                                                batch_size=32,\n",
    "                                                class_mode='categorical')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "2/2 [==============================] - 2s 857ms/step - loss: 1.1199 - accuracy: 0.6667 - val_loss: 5.9917 - val_accuracy: 0.3000\n",
      "Epoch 2/30\n",
      "2/2 [==============================] - 1s 713ms/step - loss: 1.6938 - accuracy: 0.8095 - val_loss: 5.6551 - val_accuracy: 0.3000\n",
      "Epoch 3/30\n",
      "2/2 [==============================] - 2s 1s/step - loss: 0.8588 - accuracy: 0.8095 - val_loss: 2.6657 - val_accuracy: 0.3000\n",
      "Epoch 4/30\n",
      "2/2 [==============================] - 2s 946ms/step - loss: 0.6374 - accuracy: 0.6190 - val_loss: 2.0200 - val_accuracy: 0.5000\n",
      "Epoch 5/30\n",
      "2/2 [==============================] - 2s 958ms/step - loss: 0.5812 - accuracy: 0.8095 - val_loss: 3.2042 - val_accuracy: 0.2000\n",
      "Epoch 6/30\n",
      "2/2 [==============================] - 2s 957ms/step - loss: 0.3200 - accuracy: 0.8095 - val_loss: 4.4797 - val_accuracy: 0.3000\n",
      "Epoch 7/30\n",
      "2/2 [==============================] - 1s 737ms/step - loss: 0.3997 - accuracy: 0.8095 - val_loss: 4.5382 - val_accuracy: 0.3000\n",
      "Epoch 8/30\n",
      "2/2 [==============================] - 2s 818ms/step - loss: 0.2463 - accuracy: 0.8095 - val_loss: 3.9441 - val_accuracy: 0.1000\n",
      "Epoch 9/30\n",
      "2/2 [==============================] - 2s 904ms/step - loss: 0.2371 - accuracy: 0.8810 - val_loss: 3.5354 - val_accuracy: 0.1000\n",
      "Epoch 10/30\n",
      "2/2 [==============================] - 1s 732ms/step - loss: 0.2197 - accuracy: 0.9048 - val_loss: 3.8636 - val_accuracy: 0.0000e+00\n",
      "Epoch 11/30\n",
      "2/2 [==============================] - 2s 959ms/step - loss: 0.1693 - accuracy: 0.9762 - val_loss: 4.4538 - val_accuracy: 0.0000e+00\n",
      "Epoch 12/30\n",
      "2/2 [==============================] - 2s 930ms/step - loss: 0.1443 - accuracy: 0.9524 - val_loss: 4.9855 - val_accuracy: 0.1000\n",
      "Epoch 13/30\n",
      "2/2 [==============================] - 2s 938ms/step - loss: 0.2575 - accuracy: 0.9048 - val_loss: 5.0694 - val_accuracy: 0.1000\n",
      "Epoch 14/30\n",
      "2/2 [==============================] - 2s 829ms/step - loss: 0.0979 - accuracy: 0.9762 - val_loss: 4.8433 - val_accuracy: 0.1000\n",
      "Epoch 15/30\n",
      "2/2 [==============================] - 2s 926ms/step - loss: 0.0688 - accuracy: 1.0000 - val_loss: 4.6357 - val_accuracy: 0.0000e+00\n",
      "Epoch 16/30\n",
      "2/2 [==============================] - 2s 920ms/step - loss: 0.1118 - accuracy: 0.9762 - val_loss: 4.5316 - val_accuracy: 0.0000e+00\n",
      "Epoch 17/30\n",
      "2/2 [==============================] - 2s 813ms/step - loss: 0.1328 - accuracy: 0.9524 - val_loss: 4.7852 - val_accuracy: 0.0000e+00\n",
      "Epoch 18/30\n",
      "2/2 [==============================] - 2s 874ms/step - loss: 0.1101 - accuracy: 0.9524 - val_loss: 5.0819 - val_accuracy: 0.0000e+00\n",
      "Epoch 19/30\n",
      "2/2 [==============================] - 2s 939ms/step - loss: 0.1324 - accuracy: 0.9286 - val_loss: 5.2379 - val_accuracy: 0.1000\n",
      "Epoch 20/30\n",
      "2/2 [==============================] - 2s 825ms/step - loss: 0.0877 - accuracy: 1.0000 - val_loss: 5.2856 - val_accuracy: 0.1000\n",
      "Epoch 21/30\n",
      "2/2 [==============================] - 2s 907ms/step - loss: 0.1050 - accuracy: 0.9524 - val_loss: 5.2738 - val_accuracy: 0.1000\n",
      "Epoch 22/30\n",
      "2/2 [==============================] - 2s 810ms/step - loss: 0.0708 - accuracy: 0.9762 - val_loss: 5.1121 - val_accuracy: 0.0000e+00\n",
      "Epoch 23/30\n",
      "2/2 [==============================] - 2s 899ms/step - loss: 0.0643 - accuracy: 1.0000 - val_loss: 5.1353 - val_accuracy: 0.0000e+00\n",
      "Epoch 24/30\n",
      "2/2 [==============================] - 2s 952ms/step - loss: 0.0744 - accuracy: 1.0000 - val_loss: 5.3176 - val_accuracy: 0.0000e+00\n",
      "Epoch 25/30\n",
      "2/2 [==============================] - 2s 840ms/step - loss: 0.0472 - accuracy: 1.0000 - val_loss: 5.4000 - val_accuracy: 0.0000e+00\n",
      "Epoch 26/30\n",
      "2/2 [==============================] - 2s 906ms/step - loss: 0.0579 - accuracy: 1.0000 - val_loss: 5.4614 - val_accuracy: 0.0000e+00\n",
      "Epoch 27/30\n",
      "2/2 [==============================] - 2s 846ms/step - loss: 0.0557 - accuracy: 1.0000 - val_loss: 5.5027 - val_accuracy: 0.0000e+00\n",
      "Epoch 28/30\n",
      "2/2 [==============================] - 2s 948ms/step - loss: 0.0658 - accuracy: 1.0000 - val_loss: 5.4238 - val_accuracy: 0.0000e+00\n",
      "Epoch 29/30\n",
      "2/2 [==============================] - 2s 811ms/step - loss: 0.0404 - accuracy: 1.0000 - val_loss: 5.3106 - val_accuracy: 0.0000e+00\n",
      "Epoch 30/30\n",
      "2/2 [==============================] - 2s 820ms/step - loss: 0.0452 - accuracy: 1.0000 - val_loss: 5.2477 - val_accuracy: 0.0000e+00\n"
     ]
    }
   ],
   "source": [
    "# Fit the model\n",
    "r = model.fit_generator(\n",
    "  training_set,\n",
    "  validation_data=test_set,\n",
    "  epochs=30,\n",
    "  steps_per_epoch=len(training_set),\n",
    "  validation_steps=len(test_set)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "\n",
    "from keras.models import load_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save('vgg19.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['val_loss', 'val_accuracy', 'loss', 'accuracy'])\n"
     ]
    }
   ],
   "source": [
    "print(r.history.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Loss\n",
    "plt.plot(r.history['loss'], label='train loss')\n",
    "plt.plot(r.history['val_loss'], label='validation loss')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "plt.savefig('LossValidation_loss')\n",
    "\n",
    "# Accuracy\n",
    "plt.plot(r.history['accuracy'], label='train accuracy')\n",
    "plt.plot(r.history['val_accuracy'], label='validation accuracy')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "plt.savefig('AccVal_accuracy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
